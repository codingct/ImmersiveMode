package com.code.immersivemode;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.code.immersivemode.Record;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table RECORD.
*/
public class RecordDao extends AbstractDao<Record, Integer> {

    public static final String TABLENAME = "RECORD";

    /**
     * Properties of entity Record.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Record_id = new Property(0, int.class, "record_id", true, "RECORD_ID");
        public final static Property User_id = new Property(1, int.class, "user_id", false, "USER_ID");
        public final static Property Record_time = new Property(2, String.class, "record_time", false, "RECORD_TIME");
    };


    public RecordDao(DaoConfig config) {
        super(config);
    }
    
    public RecordDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'RECORD' (" + //
                "'RECORD_ID' INTEGER PRIMARY KEY NOT NULL ," + // 0: record_id
                "'USER_ID' INTEGER NOT NULL ," + // 1: user_id
                "'RECORD_TIME' TEXT);"); // 2: record_time
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'RECORD'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Record entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getRecord_id());
        stmt.bindLong(2, entity.getUser_id());
 
        String record_time = entity.getRecord_time();
        if (record_time != null) {
            stmt.bindString(3, record_time);
        }
    }

    /** @inheritdoc */
    @Override
    public Integer readKey(Cursor cursor, int offset) {
        return cursor.getInt(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Record readEntity(Cursor cursor, int offset) {
        Record entity = new Record( //
            cursor.getInt(offset + 0), // record_id
            cursor.getInt(offset + 1), // user_id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2) // record_time
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Record entity, int offset) {
        entity.setRecord_id(cursor.getInt(offset + 0));
        entity.setUser_id(cursor.getInt(offset + 1));
        entity.setRecord_time(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
     }
    
    /** @inheritdoc */
    @Override
    protected Integer updateKeyAfterInsert(Record entity, long rowId) {
        return entity.getRecord_id();
    }
    
    /** @inheritdoc */
    @Override
    public Integer getKey(Record entity) {
        if(entity != null) {
            return entity.getRecord_id();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}

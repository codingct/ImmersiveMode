package com.code.immersivemode;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.code.immersivemode.Step;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table STEP.
*/
public class StepDao extends AbstractDao<Step, Long> {

    public static final String TABLENAME = "STEP";

    /**
     * Properties of entity Step.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property User_id = new Property(1, Integer.class, "user_id", false, "USER_ID");
        public final static Property Step_date = new Property(2, String.class, "step_date", false, "STEP_DATE");
        public final static Property Step_0 = new Property(3, Integer.class, "step_0", false, "STEP_0");
        public final static Property Step_1 = new Property(4, Integer.class, "step_1", false, "STEP_1");
        public final static Property Step_2 = new Property(5, Integer.class, "step_2", false, "STEP_2");
        public final static Property Step_3 = new Property(6, Integer.class, "step_3", false, "STEP_3");
        public final static Property Step_4 = new Property(7, Integer.class, "step_4", false, "STEP_4");
        public final static Property Step_5 = new Property(8, Integer.class, "step_5", false, "STEP_5");
        public final static Property Step_6 = new Property(9, Integer.class, "step_6", false, "STEP_6");
        public final static Property Step_7 = new Property(10, Integer.class, "step_7", false, "STEP_7");
        public final static Property Step_8 = new Property(11, Integer.class, "step_8", false, "STEP_8");
        public final static Property Step_9 = new Property(12, Integer.class, "step_9", false, "STEP_9");
        public final static Property Step_10 = new Property(13, Integer.class, "step_10", false, "STEP_10");
        public final static Property Step_11 = new Property(14, Integer.class, "step_11", false, "STEP_11");
        public final static Property Step_12 = new Property(15, Integer.class, "step_12", false, "STEP_12");
        public final static Property Step_13 = new Property(16, Integer.class, "step_13", false, "STEP_13");
        public final static Property Step_14 = new Property(17, Integer.class, "step_14", false, "STEP_14");
        public final static Property Step_15 = new Property(18, Integer.class, "step_15", false, "STEP_15");
        public final static Property Step_16 = new Property(19, Integer.class, "step_16", false, "STEP_16");
        public final static Property Step_17 = new Property(20, Integer.class, "step_17", false, "STEP_17");
        public final static Property Step_18 = new Property(21, Integer.class, "step_18", false, "STEP_18");
        public final static Property Step_19 = new Property(22, Integer.class, "step_19", false, "STEP_19");
        public final static Property Step_20 = new Property(23, Integer.class, "step_20", false, "STEP_20");
        public final static Property Step_21 = new Property(24, Integer.class, "step_21", false, "STEP_21");
        public final static Property Step_22 = new Property(25, Integer.class, "step_22", false, "STEP_22");
        public final static Property Step_23 = new Property(26, Integer.class, "step_23", false, "STEP_23");
    };


    public StepDao(DaoConfig config) {
        super(config);
    }
    
    public StepDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'STEP' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'USER_ID' INTEGER," + // 1: user_id
                "'STEP_DATE' TEXT," + // 2: step_date
                "'STEP_0' INTEGER," + // 3: step_0
                "'STEP_1' INTEGER," + // 4: step_1
                "'STEP_2' INTEGER," + // 5: step_2
                "'STEP_3' INTEGER," + // 6: step_3
                "'STEP_4' INTEGER," + // 7: step_4
                "'STEP_5' INTEGER," + // 8: step_5
                "'STEP_6' INTEGER," + // 9: step_6
                "'STEP_7' INTEGER," + // 10: step_7
                "'STEP_8' INTEGER," + // 11: step_8
                "'STEP_9' INTEGER," + // 12: step_9
                "'STEP_10' INTEGER," + // 13: step_10
                "'STEP_11' INTEGER," + // 14: step_11
                "'STEP_12' INTEGER," + // 15: step_12
                "'STEP_13' INTEGER," + // 16: step_13
                "'STEP_14' INTEGER," + // 17: step_14
                "'STEP_15' INTEGER," + // 18: step_15
                "'STEP_16' INTEGER," + // 19: step_16
                "'STEP_17' INTEGER," + // 20: step_17
                "'STEP_18' INTEGER," + // 21: step_18
                "'STEP_19' INTEGER," + // 22: step_19
                "'STEP_20' INTEGER," + // 23: step_20
                "'STEP_21' INTEGER," + // 24: step_21
                "'STEP_22' INTEGER," + // 25: step_22
                "'STEP_23' INTEGER);"); // 26: step_23
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'STEP'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Step entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer user_id = entity.getUser_id();
        if (user_id != null) {
            stmt.bindLong(2, user_id);
        }
 
        String step_date = entity.getStep_date();
        if (step_date != null) {
            stmt.bindString(3, step_date);
        }
 
        Integer step_0 = entity.getStep_0();
        if (step_0 != null) {
            stmt.bindLong(4, step_0);
        }
 
        Integer step_1 = entity.getStep_1();
        if (step_1 != null) {
            stmt.bindLong(5, step_1);
        }
 
        Integer step_2 = entity.getStep_2();
        if (step_2 != null) {
            stmt.bindLong(6, step_2);
        }
 
        Integer step_3 = entity.getStep_3();
        if (step_3 != null) {
            stmt.bindLong(7, step_3);
        }
 
        Integer step_4 = entity.getStep_4();
        if (step_4 != null) {
            stmt.bindLong(8, step_4);
        }
 
        Integer step_5 = entity.getStep_5();
        if (step_5 != null) {
            stmt.bindLong(9, step_5);
        }
 
        Integer step_6 = entity.getStep_6();
        if (step_6 != null) {
            stmt.bindLong(10, step_6);
        }
 
        Integer step_7 = entity.getStep_7();
        if (step_7 != null) {
            stmt.bindLong(11, step_7);
        }
 
        Integer step_8 = entity.getStep_8();
        if (step_8 != null) {
            stmt.bindLong(12, step_8);
        }
 
        Integer step_9 = entity.getStep_9();
        if (step_9 != null) {
            stmt.bindLong(13, step_9);
        }
 
        Integer step_10 = entity.getStep_10();
        if (step_10 != null) {
            stmt.bindLong(14, step_10);
        }
 
        Integer step_11 = entity.getStep_11();
        if (step_11 != null) {
            stmt.bindLong(15, step_11);
        }
 
        Integer step_12 = entity.getStep_12();
        if (step_12 != null) {
            stmt.bindLong(16, step_12);
        }
 
        Integer step_13 = entity.getStep_13();
        if (step_13 != null) {
            stmt.bindLong(17, step_13);
        }
 
        Integer step_14 = entity.getStep_14();
        if (step_14 != null) {
            stmt.bindLong(18, step_14);
        }
 
        Integer step_15 = entity.getStep_15();
        if (step_15 != null) {
            stmt.bindLong(19, step_15);
        }
 
        Integer step_16 = entity.getStep_16();
        if (step_16 != null) {
            stmt.bindLong(20, step_16);
        }
 
        Integer step_17 = entity.getStep_17();
        if (step_17 != null) {
            stmt.bindLong(21, step_17);
        }
 
        Integer step_18 = entity.getStep_18();
        if (step_18 != null) {
            stmt.bindLong(22, step_18);
        }
 
        Integer step_19 = entity.getStep_19();
        if (step_19 != null) {
            stmt.bindLong(23, step_19);
        }
 
        Integer step_20 = entity.getStep_20();
        if (step_20 != null) {
            stmt.bindLong(24, step_20);
        }
 
        Integer step_21 = entity.getStep_21();
        if (step_21 != null) {
            stmt.bindLong(25, step_21);
        }
 
        Integer step_22 = entity.getStep_22();
        if (step_22 != null) {
            stmt.bindLong(26, step_22);
        }
 
        Integer step_23 = entity.getStep_23();
        if (step_23 != null) {
            stmt.bindLong(27, step_23);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Step readEntity(Cursor cursor, int offset) {
        Step entity = new Step( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // user_id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // step_date
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // step_0
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // step_1
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // step_2
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // step_3
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // step_4
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // step_5
            cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9), // step_6
            cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10), // step_7
            cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11), // step_8
            cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12), // step_9
            cursor.isNull(offset + 13) ? null : cursor.getInt(offset + 13), // step_10
            cursor.isNull(offset + 14) ? null : cursor.getInt(offset + 14), // step_11
            cursor.isNull(offset + 15) ? null : cursor.getInt(offset + 15), // step_12
            cursor.isNull(offset + 16) ? null : cursor.getInt(offset + 16), // step_13
            cursor.isNull(offset + 17) ? null : cursor.getInt(offset + 17), // step_14
            cursor.isNull(offset + 18) ? null : cursor.getInt(offset + 18), // step_15
            cursor.isNull(offset + 19) ? null : cursor.getInt(offset + 19), // step_16
            cursor.isNull(offset + 20) ? null : cursor.getInt(offset + 20), // step_17
            cursor.isNull(offset + 21) ? null : cursor.getInt(offset + 21), // step_18
            cursor.isNull(offset + 22) ? null : cursor.getInt(offset + 22), // step_19
            cursor.isNull(offset + 23) ? null : cursor.getInt(offset + 23), // step_20
            cursor.isNull(offset + 24) ? null : cursor.getInt(offset + 24), // step_21
            cursor.isNull(offset + 25) ? null : cursor.getInt(offset + 25), // step_22
            cursor.isNull(offset + 26) ? null : cursor.getInt(offset + 26) // step_23
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Step entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUser_id(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setStep_date(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setStep_0(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setStep_1(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setStep_2(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setStep_3(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setStep_4(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setStep_5(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setStep_6(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
        entity.setStep_7(cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10));
        entity.setStep_8(cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11));
        entity.setStep_9(cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12));
        entity.setStep_10(cursor.isNull(offset + 13) ? null : cursor.getInt(offset + 13));
        entity.setStep_11(cursor.isNull(offset + 14) ? null : cursor.getInt(offset + 14));
        entity.setStep_12(cursor.isNull(offset + 15) ? null : cursor.getInt(offset + 15));
        entity.setStep_13(cursor.isNull(offset + 16) ? null : cursor.getInt(offset + 16));
        entity.setStep_14(cursor.isNull(offset + 17) ? null : cursor.getInt(offset + 17));
        entity.setStep_15(cursor.isNull(offset + 18) ? null : cursor.getInt(offset + 18));
        entity.setStep_16(cursor.isNull(offset + 19) ? null : cursor.getInt(offset + 19));
        entity.setStep_17(cursor.isNull(offset + 20) ? null : cursor.getInt(offset + 20));
        entity.setStep_18(cursor.isNull(offset + 21) ? null : cursor.getInt(offset + 21));
        entity.setStep_19(cursor.isNull(offset + 22) ? null : cursor.getInt(offset + 22));
        entity.setStep_20(cursor.isNull(offset + 23) ? null : cursor.getInt(offset + 23));
        entity.setStep_21(cursor.isNull(offset + 24) ? null : cursor.getInt(offset + 24));
        entity.setStep_22(cursor.isNull(offset + 25) ? null : cursor.getInt(offset + 25));
        entity.setStep_23(cursor.isNull(offset + 26) ? null : cursor.getInt(offset + 26));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Step entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Step entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}

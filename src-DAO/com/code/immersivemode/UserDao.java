package com.code.immersivemode;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.code.immersivemode.User;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table USER.
*/
public class UserDao extends AbstractDao<User, Long> {

    public static final String TABLENAME = "USER";

    /**
     * Properties of entity User.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Email = new Property(1, String.class, "email", false, "EMAIL");
        public final static Property Password = new Property(2, String.class, "password", false, "PASSWORD");
        public final static Property Birthday = new Property(3, String.class, "birthday", false, "BIRTHDAY");
        public final static Property Name = new Property(4, String.class, "name", false, "NAME");
        public final static Property Gender = new Property(5, Integer.class, "gender", false, "GENDER");
        public final static Property Weight = new Property(6, String.class, "weight", false, "WEIGHT");
        public final static Property Height = new Property(7, String.class, "height", false, "HEIGHT");
        public final static Property Sum_step = new Property(8, Integer.class, "sum_step", false, "SUM_STEP");
        public final static Property Sum_calorie = new Property(9, Integer.class, "sum_calorie", false, "SUM_CALORIE");
    };


    public UserDao(DaoConfig config) {
        super(config);
    }
    
    public UserDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'USER' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'EMAIL' TEXT NOT NULL ," + // 1: email
                "'PASSWORD' TEXT NOT NULL ," + // 2: password
                "'BIRTHDAY' TEXT," + // 3: birthday
                "'NAME' TEXT," + // 4: name
                "'GENDER' INTEGER," + // 5: gender
                "'WEIGHT' TEXT," + // 6: weight
                "'HEIGHT' TEXT," + // 7: height
                "'SUM_STEP' INTEGER," + // 8: sum_step
                "'SUM_CALORIE' INTEGER);"); // 9: sum_calorie
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'USER'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, User entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getEmail());
        stmt.bindString(3, entity.getPassword());
 
        String birthday = entity.getBirthday();
        if (birthday != null) {
            stmt.bindString(4, birthday);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(5, name);
        }
 
        Integer gender = entity.getGender();
        if (gender != null) {
            stmt.bindLong(6, gender);
        }
 
        String weight = entity.getWeight();
        if (weight != null) {
            stmt.bindString(7, weight);
        }
 
        String height = entity.getHeight();
        if (height != null) {
            stmt.bindString(8, height);
        }
 
        Integer sum_step = entity.getSum_step();
        if (sum_step != null) {
            stmt.bindLong(9, sum_step);
        }
 
        Integer sum_calorie = entity.getSum_calorie();
        if (sum_calorie != null) {
            stmt.bindLong(10, sum_calorie);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public User readEntity(Cursor cursor, int offset) {
        User entity = new User( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // email
            cursor.getString(offset + 2), // password
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // birthday
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // name
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // gender
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // weight
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // height
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // sum_step
            cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9) // sum_calorie
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, User entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setEmail(cursor.getString(offset + 1));
        entity.setPassword(cursor.getString(offset + 2));
        entity.setBirthday(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setGender(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setWeight(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setHeight(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setSum_step(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setSum_calorie(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(User entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(User entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
